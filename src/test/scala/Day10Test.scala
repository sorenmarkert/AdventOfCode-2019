import Day10._
import org.scalatest.matchers.must.Matchers._
import org.scalatest.wordspec.AnyWordSpec

class Day10Test extends AnyWordSpec {

    "The asteroid mapper" should {

        "find the optimal sensor location" in {

            val testMaps = List(
                (""".#..#
                   |.....
                   |#####
                   |....#
                   |...##""", ((3,4), 8)),
                ("""......#.#.
                   |#..#.#....
                   |..#######.
                   |.#.#.###..
                   |.#..#.....
                   |..#....#.#
                   |#..#....#.
                   |.##.#..###
                   |##...#..#.
                   |.#....####
                   |""", ((5,8), 33)),
                ("""#.#...#.#.
                   |.###....#.
                   |.#....#...
                   |##.#.#.#.#
                   |....#.#.#.
                   |.##..###.#
                   |..#...##..
                   |..##....##
                   |......#...
                   |.####.###.""", ((1,2), 35)),
                (""".#..#..###
                   |####.###.#
                   |....###.#.
                   |..###.##.#
                   |##.##.#.#.
                   |....###..#
                   |..#.#..#.#
                   |#..#.#.###
                   |.##...##.#
                   |.....#.#..""", ((6,3), 41)),
                (""".#..##.###...#######
                   |##.############..##.
                   |.#.######.########.#
                   |.###.#######.####.#.
                   |#####.##.#.##.###.##
                   |..#####..#.#########
                   |####################
                   |#.####....###.#.#.##
                   |##.#################
                   |#####.##.###..####..
                   |..######..##.#######
                   |####.##.####...##..#
                   |.#####..#.######.###
                   |##...#.##########...
                   |#.##########.#######
                   |.####.#.###.###.#.##
                   |....##.##.###..#####
                   |.#.#.###########.###
                   |#.#.#.#####.####.###
                   |###.##.####.##.#..##""", ((11,13), 210)))

            testMaps.foreach { case (map, visibleAsteroids) =>
                highestVisible(map.stripMargin) mustEqual visibleAsteroids }
        }

        "point the laser at the correct targets" in {

            val testMap1 = """.#....#####...#..
                             |##...##.#####..##
                             |##...#...#.#####.
                             |..#.....X...###..
                             |..#.#.....#....##""".stripMargin

            shootLaser(testMap1, (8, 3)) mustEqual List((8, 1), (9, 0), (9, 1), (10, 0), (9, 2), (11, 1), (12, 1), (11, 2), (15, 1), (12, 2), (13, 2), (14, 2), (15, 2), (12, 3), (16, 4), (15, 4), (10, 4), (4, 4), (2, 4), (2, 3), (0, 2), (1, 2), (0, 1), (1, 1), (5, 2), (1, 0), (5, 1), (6, 1), (6, 0), (7, 0), (8, 0), (10, 1), (14, 0), (16, 1), (13, 3), (14, 3))

            val testMap2 = """.#..##.###...#######
                             |##.############..##.
                             |.#.######.########.#
                             |.###.#######.####.#.
                             |#####.##.#.##.###.##
                             |..#####..#.#########
                             |####################
                             |#.####....###.#.#.##
                             |##.#################
                             |#####.##.###..####..
                             |..######..##.#######
                             |####.##.####...##..#
                             |.#####..#.#X####.###
                             |##...#.##########...
                             |#.##########.#######
                             |.####.#.###.###.#.##
                             |....##.##.###..#####
                             |.#.#.###########.###
                             |#.#.#.#####.####.###
                             |###.##.####.##.#..##
                             |""".stripMargin

            val result = shootLaser(testMap2, (11, 13))
            result.length mustEqual 299

            List((1 - 1, (11, 12)),
                (2 - 1, (12, 1)),
                (3 - 1, (12, 2)),
                (10 - 1, (12, 8)),
                (20 - 1, (16, 0)),
                (50 - 1, (16, 9)),
                (100 - 1, (10, 16)),
                (199 - 1, (9, 6)),
                (200 - 1, (8, 2)),
                (201 - 1, (10, 9)),
                (299 - 1, (11, 1)))
                .foreach { case (index, asteroid) =>
                    result(index) mustEqual asteroid }
        }
    }
}
